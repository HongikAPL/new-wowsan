// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.3
// source: pkg/proto/subscriber.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SubscriberService_NotifyPublication_FullMethodName = "/proto.SubscriberService/NotifyPublication"
)

// SubscriberServiceClient is the client API for SubscriberService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubscriberServiceClient interface {
	NotifyPublication(ctx context.Context, in *PublicationMessage, opts ...grpc.CallOption) (*NotifyPublicationResponse, error)
}

type subscriberServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSubscriberServiceClient(cc grpc.ClientConnInterface) SubscriberServiceClient {
	return &subscriberServiceClient{cc}
}

func (c *subscriberServiceClient) NotifyPublication(ctx context.Context, in *PublicationMessage, opts ...grpc.CallOption) (*NotifyPublicationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NotifyPublicationResponse)
	err := c.cc.Invoke(ctx, SubscriberService_NotifyPublication_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubscriberServiceServer is the server API for SubscriberService service.
// All implementations must embed UnimplementedSubscriberServiceServer
// for forward compatibility.
type SubscriberServiceServer interface {
	NotifyPublication(context.Context, *PublicationMessage) (*NotifyPublicationResponse, error)
	mustEmbedUnimplementedSubscriberServiceServer()
}

// UnimplementedSubscriberServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSubscriberServiceServer struct{}

func (UnimplementedSubscriberServiceServer) NotifyPublication(context.Context, *PublicationMessage) (*NotifyPublicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyPublication not implemented")
}
func (UnimplementedSubscriberServiceServer) mustEmbedUnimplementedSubscriberServiceServer() {}
func (UnimplementedSubscriberServiceServer) testEmbeddedByValue()                           {}

// UnsafeSubscriberServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubscriberServiceServer will
// result in compilation errors.
type UnsafeSubscriberServiceServer interface {
	mustEmbedUnimplementedSubscriberServiceServer()
}

func RegisterSubscriberServiceServer(s grpc.ServiceRegistrar, srv SubscriberServiceServer) {
	// If the following call pancis, it indicates UnimplementedSubscriberServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SubscriberService_ServiceDesc, srv)
}

func _SubscriberService_NotifyPublication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicationMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriberServiceServer).NotifyPublication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriberService_NotifyPublication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriberServiceServer).NotifyPublication(ctx, req.(*PublicationMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// SubscriberService_ServiceDesc is the grpc.ServiceDesc for SubscriberService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SubscriberService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.SubscriberService",
	HandlerType: (*SubscriberServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NotifyPublication",
			Handler:    _SubscriberService_NotifyPublication_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/proto/subscriber.proto",
}
