// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.3
// source: pkg/proto/broker.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BrokerService_AddBroker_FullMethodName          = "/proto.BrokerService/AddBroker"
	BrokerService_SendSubscription_FullMethodName   = "/proto.BrokerService/SendSubscription"
	BrokerService_SendUnsubscription_FullMethodName = "/proto.BrokerService/SendUnsubscription"
	BrokerService_SendPublication_FullMethodName    = "/proto.BrokerService/SendPublication"
)

// BrokerServiceClient is the client API for BrokerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BrokerServiceClient interface {
	AddBroker(ctx context.Context, in *AddBrokerRequest, opts ...grpc.CallOption) (*AddBrokerResponse, error)
	SendSubscription(ctx context.Context, in *SendSubscriptionRequest, opts ...grpc.CallOption) (*SendSubscriptionResponse, error)
	SendUnsubscription(ctx context.Context, in *SendUnsubscriptionRequest, opts ...grpc.CallOption) (*SendUnsubscriptionResponse, error)
	SendPublication(ctx context.Context, in *SendPublicationRequest, opts ...grpc.CallOption) (*SendPublicationResponse, error)
}

type brokerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBrokerServiceClient(cc grpc.ClientConnInterface) BrokerServiceClient {
	return &brokerServiceClient{cc}
}

func (c *brokerServiceClient) AddBroker(ctx context.Context, in *AddBrokerRequest, opts ...grpc.CallOption) (*AddBrokerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddBrokerResponse)
	err := c.cc.Invoke(ctx, BrokerService_AddBroker_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerServiceClient) SendSubscription(ctx context.Context, in *SendSubscriptionRequest, opts ...grpc.CallOption) (*SendSubscriptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendSubscriptionResponse)
	err := c.cc.Invoke(ctx, BrokerService_SendSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerServiceClient) SendUnsubscription(ctx context.Context, in *SendUnsubscriptionRequest, opts ...grpc.CallOption) (*SendUnsubscriptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendUnsubscriptionResponse)
	err := c.cc.Invoke(ctx, BrokerService_SendUnsubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerServiceClient) SendPublication(ctx context.Context, in *SendPublicationRequest, opts ...grpc.CallOption) (*SendPublicationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendPublicationResponse)
	err := c.cc.Invoke(ctx, BrokerService_SendPublication_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BrokerServiceServer is the server API for BrokerService service.
// All implementations must embed UnimplementedBrokerServiceServer
// for forward compatibility.
type BrokerServiceServer interface {
	AddBroker(context.Context, *AddBrokerRequest) (*AddBrokerResponse, error)
	SendSubscription(context.Context, *SendSubscriptionRequest) (*SendSubscriptionResponse, error)
	SendUnsubscription(context.Context, *SendUnsubscriptionRequest) (*SendUnsubscriptionResponse, error)
	SendPublication(context.Context, *SendPublicationRequest) (*SendPublicationResponse, error)
	mustEmbedUnimplementedBrokerServiceServer()
}

// UnimplementedBrokerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBrokerServiceServer struct{}

func (UnimplementedBrokerServiceServer) AddBroker(context.Context, *AddBrokerRequest) (*AddBrokerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBroker not implemented")
}
func (UnimplementedBrokerServiceServer) SendSubscription(context.Context, *SendSubscriptionRequest) (*SendSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSubscription not implemented")
}
func (UnimplementedBrokerServiceServer) SendUnsubscription(context.Context, *SendUnsubscriptionRequest) (*SendUnsubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendUnsubscription not implemented")
}
func (UnimplementedBrokerServiceServer) SendPublication(context.Context, *SendPublicationRequest) (*SendPublicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPublication not implemented")
}
func (UnimplementedBrokerServiceServer) mustEmbedUnimplementedBrokerServiceServer() {}
func (UnimplementedBrokerServiceServer) testEmbeddedByValue()                       {}

// UnsafeBrokerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BrokerServiceServer will
// result in compilation errors.
type UnsafeBrokerServiceServer interface {
	mustEmbedUnimplementedBrokerServiceServer()
}

func RegisterBrokerServiceServer(s grpc.ServiceRegistrar, srv BrokerServiceServer) {
	// If the following call pancis, it indicates UnimplementedBrokerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BrokerService_ServiceDesc, srv)
}

func _BrokerService_AddBroker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBrokerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServiceServer).AddBroker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrokerService_AddBroker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServiceServer).AddBroker(ctx, req.(*AddBrokerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrokerService_SendSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServiceServer).SendSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrokerService_SendSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServiceServer).SendSubscription(ctx, req.(*SendSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrokerService_SendUnsubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendUnsubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServiceServer).SendUnsubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrokerService_SendUnsubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServiceServer).SendUnsubscription(ctx, req.(*SendUnsubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrokerService_SendPublication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendPublicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServiceServer).SendPublication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrokerService_SendPublication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServiceServer).SendPublication(ctx, req.(*SendPublicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BrokerService_ServiceDesc is the grpc.ServiceDesc for BrokerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BrokerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.BrokerService",
	HandlerType: (*BrokerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddBroker",
			Handler:    _BrokerService_AddBroker_Handler,
		},
		{
			MethodName: "SendSubscription",
			Handler:    _BrokerService_SendSubscription_Handler,
		},
		{
			MethodName: "SendUnsubscription",
			Handler:    _BrokerService_SendUnsubscription_Handler,
		},
		{
			MethodName: "SendPublication",
			Handler:    _BrokerService_SendPublication_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/proto/broker.proto",
}
